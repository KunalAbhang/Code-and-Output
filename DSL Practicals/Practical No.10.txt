#include <iostream>
using namespace std;

struct SLL_Node {
    int start;
    int end;
    int min;
    int max;
    int flag;
    SLL_Node *next;
};

class App_Schedule {
public:
    App_Schedule() : head(nullptr), size(0) {}
    ~App_Schedule();

    void create_Shed();
    void display_Shed();
    void book_App();
    void cancel_App();
    void sort_App();

private:
    SLL_Node *head;
    int size;
};

App_Schedule::~App_Schedule() {
    SLL_Node *current = head;
    while (current != nullptr) {
        SLL_Node *next = current->next;
        delete current;
        current = next;
    }
}

void App_Schedule::create_Shed() {
    cout << "\n\n\t How many Appointment Slots: ";
    cin >> size;

    if (size <= 0) {
        cout << "\n\t Invalid number of slots!";
        return;
    }

    for (int i = 0; i < size; i++) {
        SLL_Node *temp = new SLL_Node;

        cout << "\n\n\t Enter Start Time: ";
        cin >> temp->start;
        cout << "\n\t Enter End Time: ";
        cin >> temp->end;
        cout << "\n\n\t Enter Minimum Duration: ";
        cin >> temp->min;
        cout << "\n\t Enter Maximum Duration: ";
        cin >> temp->max;
        temp->flag = 0;
        temp->next = nullptr;

        if (head == nullptr) {
            head = temp;
        } else {
            SLL_Node *last = head;
            while (last->next != nullptr) {
                last = last->next;
            }
            last->next = temp;
        }
    }
}

void App_Schedule::display_Shed() {
    int cnt = 1;
    SLL_Node *temp = head;

    cout << "\n\n\t ****Appointment Schedule****";
    cout << "\n\n\t Srno.\tStart\tEnd\tMin_Dur\tMax_Dur\tStatus";

    while (temp != nullptr) {
        cout << "\n\n\t " << cnt;
        cout << "\t " << temp->start;
        cout << "\t " << temp->end;
        cout << "\t  " << temp->min;
        cout << "\t  " << temp->max;
        cout << (temp->flag ? "\t-Booked-" : "\t--Free--");
        temp = temp->next;
        cnt++;
    }
}

void App_Schedule::book_App() {
    int start;
    cout << "\n\n\t Please enter Appointment Start Time to Book: ";
    cin >> start;

    SLL_Node *temp = head;
    while (temp != nullptr) {
        if (start == temp->start) {
            if (temp->flag == 0) {
                cout << "\n\n\t Appointment Slot is Booked!!!";
                temp->flag = 1;
            } else {
                cout << "\n\n\t Appointment Slot is not Available!!!";
            }
            return; // Exit after booking
        }
        temp = temp->next;
    }
    cout << "\n\n\t No Appointment Slot found for this Start Time!";
}

void App_Schedule::cancel_App() {
    int start;
    cout << "\n\n\t Please enter Appointment Start Time to Cancel: ";
    cin >> start;

    SLL_Node *temp = head;
    while (temp != nullptr) {
        if (start == temp->start) {
            if (temp->flag == 1) {
                cout << "\n\n\t Your Appointment Slot is Canceled!!!";
                temp->flag = 0;
            } else {
                cout << "\n\n\t Your Appointment was not Booked!!!";
            }
            return; // Exit after canceling
        }
        temp = temp->next;
    }
    cout << "\n\n\t No Appointment Slot found for this Start Time!";
}

void App_Schedule::sort_App() {
    if (head == nullptr || head->next == nullptr) return; // No need to sort if empty or single node

    for (int i = 0; i < size - 1; i++) {
        SLL_Node *current = head;
        while (current->next != nullptr) {
            if (current->start > current->next->start) {
                swap(current->start, current->next->start);
                swap(current->end, current->next->end);
                swap(current->min, current->next->min);
                swap(current->max, current->next->max);
            }
            current = current->next;
        }
    }
    cout << "\n\n\t The Appointments got Sorted!!!";
}

int main() {
    App_Schedule A1;
    int ch;
    char ans;

    do {
        cout << "\n\n *** Menu ***";
        cout << "\n 1. Create Appointment Schedule";
        cout << "\n 2. Display Free Slots";
        cout << "\n 3. Book an Appointment";
        cout << "\n 4. Cancel an Appointment";
        cout << "\n 5. Sort slots based on Time";
        cout << "\n\n\t Enter your choice: ";
        cin >> ch;

        switch (ch) {
            case 1: A1.create_Shed(); break;
            case 2: A1.display_Shed(); break;
            case 3: A1.book_App(); break;
            case 4: A1.cancel_App(); break;
            case 5: A1.sort_App(); break;
            default: cout << "\n\t Wrong choice!!!";
        }

        cout << "\n\n\t Do you want to continue? (y/n): ";
        cin >> ans;
    } while (ans == 'y');

    return 0;
}


Output -
*** Menu ***
 1. Create Appointment Schedule
 2. Display Free Slots
 3. Book an Appointment
 4. Cancel an Appointment
 5. Sort slots based on Time

	 Enter your choice: 1


	 How many Appointment Slots: 3


	 Enter Start Time: 12

	 Enter End Time: 1


	 Enter Minimum Duration: 1

	 Enter Maximum Duration: 1


	 Enter Start Time: 1

	 Enter End Time: 2


	 Enter Minimum Duration: 1

	 Enter Maximum Duration: 1


	 Enter Start Time: 2

	 Enter End Time: 4


	 Enter Minimum Duration: 2

	 Enter Maximum Duration: 2


	 Do you want to continue? (y/n): y


 *** Menu ***
 1. Create Appointment Schedule
 2. Display Free Slots
 3. Book an Appointment
 4. Cancel an Appointment
 5. Sort slots based on Time

	 Enter your choice: 2


	 ****Appointment Schedule****

	 Srno.	Start	End	Min_Dur	Max_Dur	Status

	 1	 12	 1	  1	  1	--Free--

	 2	 1	 2	  1	  1	--Free--

	 3	 2	 4	  2	  2	--Free--

	 Do you want to continue? (y/n): y


 *** Menu ***
 1. Create Appointment Schedule
 2. Display Free Slots
 3. Book an Appointment
 4. Cancel an Appointment
 5. Sort slots based on Time

	 Enter your choice: 3


	 Please enter Appointment Start Time to Book: 12


	 Appointment Slot is Booked!!!

	 Do you want to continue? (y/n): y


 *** Menu ***
 1. Create Appointment Schedule
 2. Display Free Slots
 3. Book an Appointment
 4. Cancel an Appointment
 5. Sort slots based on Time

	 Enter your choice: 
4


	 Please enter Appointment Start Time to Cancel: 5


	 No Appointment Slot found for this Start Time!

	 Do you want to continue? (y/n): 5


=== Code Execution Successful ===